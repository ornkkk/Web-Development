const projectName = "markdown-previewer";
localStorage.setItem('example_project', 'Markdown Previewer');

// ALLOWS LINE BREAKS WITH RETURN BUTTON
marked.setOptions({
  breaks: true,
});

// INSERTS target="_blank" INTO HREF TAGS (required for codepen links)
const renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return `<a target="_blank" href="${href}">${text}` + '</a>';
}



class App extends React.Component{
  constructor(props){
    super(props);
    this.state={
      input : placeholder,
      maxEditor : false,
      maxPreview : false
    };
    this.handleChange = this.handleChange.bind(this);
    this.maximizeEditor = this.maximizeEditor.bind(this);
    this.maximizePreview = this.maximizePreview.bind(this);
  }
  handleChange(e){
    this.setState({
      input: e.target.value
    });
  }
  maximizeEditor(){
    this.setState({
      maxEditor: !this.state.maxEditor
    });
  }
  maximizePreview(){
    this.setState({
      maxPreview: !this.state.maxPreview
    });
  }
  render(){
    return(
      <body className={"fluid-container"}>
        <AppEditor cols={this.state.maxEditor ? "11 max":this.state.maxPreview ? "0 min":"10 reg-e"} maximizeEditor={this.maximizeEditor} input={this.state.input} handleChange={this.handleChange} />
       
        <AppPreview cols={this.state.maxPreview ? "11 max":this.state.maxEditor ? "0 min":"10 reg-p"} maximizePreview={this.maximizePreview} markdown={this.state.input}/>

      </body>
    );
    
  }
};

class AppEditor extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    return(
      <div className={"row justify-content-center"}>
        <div id={"editor-box"} className={"col-"+this.props.cols}>
          <div id={"editor-title"} className={"title-bar"}>
            <h3>Editor</h3>
            <h3><i className={"fa fa-compress"} onClick={this.props.maximizeEditor}></i></h3>
          </div>
          <div id="editor-panel">
          <textarea id="editor"
      value={this.props.input}
      onChange={this.props.handleChange}
      type="text"/>
           </div>
        </div>
      </div>
    );
  }
};
class AppPreview extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    return(
       <div className="row justify-content-center">
    <div id="preview-box" className={"col-"+this.props.cols}>
      <div id="editor-title" className="title-bar">
        <h3>Preview</h3>
        <h3><i className="fa fa-compress" onClick={this.props.maximizePreview}></i></h3>
      </div>
      <div id='preview' dangerouslySetInnerHTML={{__html: marked(this.props.markdown, { renderer: renderer })}} />
    </div>
  </div>
    );
  }
};

const placeholder = 
`# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`
  
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | ------------- 
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)
`
ReactDOM.render(<App />, document.getElementById('app'));
